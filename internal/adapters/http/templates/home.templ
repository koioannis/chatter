package templates

import "fmt"
import "math/rand"
import "github.com/koioannis/chatter/internal/core/domain"
import "strings"
import "github.com/koioannis/chatter/internal/adapters/http/auth"

func getRandomColor(colors []string) string {
	index := rand.Intn(len(colors))
	return colors[index]
}

func firstTwoLetters(s string) string {
	if len(s) == 0 {
		return ""
	}
	runes := []rune(s)
	if len(runes) >= 2 {
		return string(runes[:2])
	}
	return string(runes)
}

func getRandomPlaceholderUrl(channelName string) string {
	return fmt.Sprintf("https://placehold.co/200x/ADD8E6/ffffff.svg?text=%s&font=Lato", firstTwoLetters(channelName))
}

templ Room(room *domain.Room) {
	<div
		class="flex items-center mb-4 cursor-pointer hover:bg-gray-100 p-2 rounded-md"
		hx-get={ fmt.Sprintf("/room/%s/message", room.Id.String()) }
		hx-target="#main-chat-area"
		hx-swap="innerHTML"
		_="on htmx:afterRequest toggle @disabled on #submit-message-btn"
	>
		<div class="w-12 h-12 bg-gray-300 rounded-full mr-3">
			<img src={ getRandomPlaceholderUrl(room.Name) } alt="User Avatar" class="w-12 h-12 rounded-full"/>
		</div>
		<div class="flex-1">
			<h2 class="text-lg font-semibold">{ room.Name }</h2>
			<p class="text-gray-600">Todo</p>
		</div>
	</div>
}

templ Rooms(rooms []*domain.Room) {
	<div id="rooms" class="overflow-y-auto h-screen">
		for _, room := range rooms {
			@Room(room)
		}
	</div>
}

templ AddRoomModal(value string, err error) {
	<div id="add-room-modal" class="z-10 w-56 p-3 bg-white rounded-lg shadow bg-gray-700 absolute right-0 top-10">
		<form
			hx-post="/room"
			hx-target="#rooms"
			hx-swap="afterbegin"
			hx-target-error="#add-room-modal"
			method="post"
			_="on htmx:afterRequest if event.detail.xhr.status == 200 remove #add-room-modal"
		>
			if err == nil {
				<input type="text" name="name" placeholder="Enter Room name" class="text-black w-full p-2 rounded-md border border-gray-600 focus:outline-none focus:border-blue-500"/>
			} else {
				<input value={ value } type="text" name="name" placeholder="Enter Room name" class="text-black w-full p-2 rounded-md border border-red-600"/>
				<span class="mt-2 t-sm text-red-500 peer-[&:not(:placeholder-shown):not(:focus):invalid]:block">
					{ strings.Title(err.Error()) }
				</span>
			}
			<div id="foo" class="flex space-x-5 mt-2 space-between">
				<button
					type="submit"
					class="p-2 bg-blue-500 grow rounded-md border border-gray-400 focus:outline-none focus:border-blue-500"
				>
					Add
				</button>
				<button
					_="on click remove #add-room-modal"
					type="button"
					class="p-2 bg-red-500 rounded-md border border-gray-400 focus:outline-none focus:border-blue-500"
				>Close</button>
			</div>
		</form>
	</div>
}

templ ChatHeader(msg string) {
	<header class="bg-white p-4 text-gray-700">
		<h1 class="text-2xl font-semibold">{ msg }</h1>
	</header>
}

templ Message(message *domain.Message) {
	if auth.GetCurrentUser(ctx) == message.Sender {
		<div class="flex justify-end mb-4" title={ message.Sender }>
			<div class="flex max-w-96 bg-indigo-500 text-white rounded-lg p-3 gap-3">
				<p>{ message.Content }</p>
			</div>
			<div class="w-9 h-9 rounded-full flex items-center justify-center ml-2">
				<img src={ getRandomPlaceholderUrl(message.Sender) } alt="My Avatar" class="w-8 h-8 rounded-full"/>
			</div>
		</div>
	} else {
		<div class="flex mb-4" title={ message.Sender }>
			<div class="w-9 h-9 rounded-full flex items-center justify-center mr-2">
				<img src={ getRandomPlaceholderUrl(message.Sender) } alt="User Avatar" class="w-8 h-8 rounded-full"/>
			</div>
			<div class="flex max-w-96 bg-white rounded-lg p-3 gap-3">
				<p class="text-gray-700">{ message.Content }</p>
			</div>
		</div>
	}
}

templ Messages(messages []*domain.Message, includeOOB bool) {
	<div
		id="messages"
		class="h-screen overflow-y-auto p-4 pb-36"
		if includeOOB {
			hx-swap-oob="beforeend"
		}
		_="
		on load set my scrollTop to my scrollHeight end
		on htmx:afterSettle set my scrollTop to my scrollHeight end
		on htmx:oobAfterSwap set my scrollTop to my scrollHeight end
		"
	>
		for _, m := range messages {
			@Message(m)
		}
	</div>
}

templ Chat(room *domain.Room, messages []*domain.Message) {
	<!-- Chat Messages -->
	<div
		class="h-screen"
		hx-ext="ws"
		ws-connect={ fmt.Sprintf("/messages/ws/%s", room.Id) }
	>
		@ChatHeader(room.Name)
		@Messages(messages, false)
		<!-- Chat Input -->
		<footer class="bg-white border-t border-gray-300 p-4 absolute bottom-0 w-3/4">
			<form
				hx-post={ fmt.Sprintf("room/%s/message", room.Id) }
				hx-target="#messages"
				hx-swap="beforeend"
				class="flex items-center"
				_="on htmx:afterRequest reset() me"
			>
				<input type="text" name="message" id="message-input" placeholder="Type a message..." class="w-full p-2 rounded-md border border-gray-400 focus:outline-none focus:border-blue-500"/>
				<button
					id="submit-message-btn"
					type="submit"
					class="bg-indigo-500 text-white px-4 py-2 rounded-md ml-2"
					disabled
				>Send</button>
			</form>
		</footer>
	</div>
}

templ Home() {
	<!-- component -->
	<div class="flex h-screen overflow-hidden" hx-ext="response-targets">
		<!-- Sidebar -->
		<div class="w-1/4 bg-white border-r border-gray-300">
			<!-- Sidebar Header -->
			<header class="p-4 border-b border-gray-300 flex justify-between items-center bg-indigo-600 text-white">
				<h1 class="text-2xl font-semibold">{ auth.GetCurrentUser(ctx) }</h1>
				<div class="relative">
					<button
						class="text-xl"
						id="showButton"
						hx-get="/room/create"
						hx-target="#modals-here"
						hx-swap="innerHTML"
						class="uk-button uk-button-primary"
					>+</button>
					<div id="modals-here"></div>
				</div>
			</header>
			<div hx-trigger="load" hx-get="/room" hx-swap="outerHTML"></div>
		</div>
		<!-- Main Chat Area -->
		<div class="flex-1" id="main-chat-area"></div>
	</div>
}
